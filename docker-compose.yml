version: "3.7"

services:
  zookeeper:
    image: ubuntu/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      backend:
        aliases:
          - "zookeeper"

  kafkaserver:
    image: ubuntu/kafka:latest
    container_name: kafka-server
    ports:
      - "9092:9092"
    environment:
      - ZOOKEEPER_HOST=172.17.0.1
      - ZOOKEEPER_PORT=2181
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"

  redisserver:
    image: redis:7.0.6-alpine
    container_name: redis-server
    ports:
      - "6379:6379"
    networks:
      backend:
        aliases:
          - "redis"

  kibana:
    image: kibana:7.17.8
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9300
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      backend:
        aliases:
          - "kibana"

  elasticsearch:
    image: elasticsearch:7.17.8
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    volumes:
#      - "esdata:/usr/share/elasticsearch/data"
    ports:
      - "9300:9300"
      - "9200:9200"
    networks:
      backend:
        aliases:
          - "elasticsearch"

  logstash:
    image: logstash:7.17.8
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"

  zipkin:
    image: openzipkin/zipkin:2.23.19
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"

  gateway-server:
    image: mycompany/firstspringcloudgateway:0.0.1-SNAPSHOT
#    build: FristSpringCloudGateway/
    container_name: gateway-server
    ports:
      - "8072:8072"
    networks:
      backend:
        aliases:
          - "gateway-server"
    depends_on:
      - config-server
      - eureka-server
    restart: on-failure

  secondmicroservice:
    image: mycompany/secondmicroservice:0.0.1-SNAPSHOT
    container_name: second_microservice
#    build: SecondMicroservice/
    ports:
      - "8081:8081"
    networks:
      backend:
        aliases:
            - "second-microservice"
    depends_on:
      - config-server
      - eureka-server
      - firstmicroservice
    restart: on-failure

  firstmicroservice:
    image: mycompany/firstmicroservice:0.0.1-SNAPSHOT
#    build: firstmicroservice/
    container_name: first_microservice
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:mysql://datasource:3306/first_microservice
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - SPRING_APPLICATION_NAME=firstmicroservice
      - SPRING_CLOUD_CONFIG_TOKEN=myroot
    depends_on:
      - config-server
      - datasource
      - eureka-server
      - kafkaserver
    restart: on-failure
    networks:
      backend:
        aliases:
          - "first-microservice"

  config-server:
    image: mycompany/firstspringconfigurationserver:0.0.1-SNAPSHOT
    container_name: config-server
    environment:
      - ENCRYPT_KEY=my-secret
    ports:
      - "8071:8071"
    networks:
      backend:
        aliases:
          - "config-server"
    depends_on:
      - vault
    restart: on-failure

  vault:
    image: vault:1.12.2
    container_name: dev_vault
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    networks:
      backend:
        aliases:
          - "vault"

  datasource:
    image: mysql
    container_name: first_microservice_database
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 1234
#      MYSQL_DATABASE: first_microservice
    volumes:
      - ./ddl.sql:/docker-entrypoint-initdb.d/ddl.sql
    ports:
      - "3306:3306"
    networks:
      - backend

  eureka-server:
    image: mycompany/firstspringeurekaserverdiscovery:0.0.1-SNAPSHOT
    container_name: eureka_server_discovery
    environment:
      - SPRING_APPLICATION_NAME=firstspringeurekaserverdiscovery
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8071/
      - SPRING_CLOUD_CONFIG_TOKEN=myroot
    ports:
      - "8070:8070"
    networks:
      backend:
        aliases:
          - "eureka-server"
    depends_on:
      - config-server
    restart: on-failure

  keycloak:
    image: jboss/keycloak
#    image: quay.io/keycloak/keycloak:19.0.3-legacy
#    command: start-dev
#    restart: always
    container_name: keycloak
    environment:
#      - KEYCLOAK_ADMIN=admin
#      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KEYCLOAK_IMPORT=/tmp/realm-export.json
      - DB_DATABASE=keycloak
      - DB_ADDR=datasource
      - DB_PORT=3306
      - DB_USER=root
      - DB_PASSWORD=1234
      - DB_VENDOR=mysql
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
    volumes:
      - ./realm-export.json:/tmp/realm-export.json
    command:
      - "-b 0.0.0.0"
      - "-Djboss.socket.binding.port-offset=5"
      - "-Dkeycloak.profile.feature.scripts=enabled"
      - "-Dkeycloak.profile.feature.upload_scripts=enabled"
    ports:
      - "8085:8085"
    networks:
      backend:
        aliases:
          - "keycloak"
    depends_on:
      - datasource

networks:
  backend:
    driver: bridge


